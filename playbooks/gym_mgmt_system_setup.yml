---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    vars:
      region: us-east-2
    tasks:
      - name: Launch the new EC2 Instance
        ec2:
          instance_type: t2.micro
          key_name: aws_final
          image: ami-01eb7a7f8688ed90b
          user_data: "{{ lookup('file', '/home/ansible/ansible/playbooks/ans_env.sh')}}"
          region: us-east-2
          group: Newsc
          vpc_subnet_id: subnet-052af449
          assign_public_ip: yes
          wait: yes
          count: 2
          #instance_tags:
         #   name: Docker1
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_ip }}
                      insertafter="[doc]" line={{ item.public_ip }}
        with_items: "{{ ec2.instances }}"


      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: Docker

      - name: make known host entry
        shell: ssh-keyscan {{ item.public_ip }} >> /home/ansible/.ssh/known_hosts
        with_items: "{{ ec2.instances }}"

  - hosts: doc
    become: yes
    tasks:
      - name: "add docker repository"
        get_url:
          url: https://download.docker.com/linux/centos/docker-ce.repo
          dest: /etc/yum.repos.d/docker-ce.repo
          mode: 0644
          #when: ansible_distribution == "CentOS"

      - name: "Ensure old versions of docker are purged 1"
        yum: name=lxc-docker state=absent
        when: ansible_distribution == "CentOS"

      - name: "Ensure old version of docker are purged 2"
        yum: name=docker state=absent
        when: ansible_distribution == "CentOS"

      - name: "Ensure old versions of docker are purged 3"
        yum: name=docker-engine state=absent
        when: ansible_distribution == "CentOS"

      - name: "Ensure old versions of docker are purged 4"
        yum: name=docker.io state=absent
        when: ansible_distribution == "CentOS"
      - name: "get kernel version"
        shell: uname -r
        register: kernel

      - name: "install Docker prerequisite"
        yum:
          name: "{{ item }}"
          state: latest
        with_items:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2

      - name: "install docker"
        yum: name={{ item }} state=present
        when: ansible_distribution == "CentOS"
        retries: 3
        delay: 20
        with_items:
          - docker-ce
          - docker-python
      - name: "add docker group"
        group: name=docker state=present

      - name: "Add centos to docker group"
        user: name=centos groups=docker append=yes

      - name: "Start Docker service"
        service: name=docker state=started

      - name: "get docker info"
        shell: docker info
        register: docker_info
        changed_when: False
        
        
